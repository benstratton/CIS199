// Program 2
// CIS 199-01
// Due: 3/30/2019
// By: (M7256) Originally provided by Dr. Andrew Wright

// This application calculates the marginal tax rate and
// tax due for filers in 2019 tax year.

// Version 3
// Listens to radio buttons to apply income thresholds
// Calculates tax due through running total with each
// tier's portion of the tax.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Prog3
{
    public partial class Prog3Form : Form
    {
        // Tax Year 2019 Data
        // Taxable income thresholds for each status
        // Single Filers
        private const int SINGLE1 = 1;			// 1st single threshold (LOWEST)
        private const int SINGLE2 = 9700;		// 2nd single threshold
        private const int SINGLE3 = 39475;		// 3rd single threshold
        private const int SINGLE4 = 84200;		// 4th single threshold
        private const int SINGLE5 = 160725;		// 5th single threshold
        private const int SINGLE6 = 204100;   // 6th single threshold
		private const int SINGLE7 = 510300;		// 7th single threshold (HIGHEST)


        //Married Filing Separately
        private const int SEPARATELY1 = 1;		// 1st married-separately threshold (LOWEST)
        private const int SEPARATELY2 = 9701;	// 2nd married-separately threshold
        private const int SEPARATELY3 = 39476;  // 3rd married-separately threshold
        private const int SEPARATELY4 = 84201;	// 4th married-separately threshold
        private const int SEPARATELY5 = 160726; // 5th married-separately threshold
        private const int SEPARATELY6 = 204101; // 6th married-separately threshold
		private const int SEPARATELY7 = 306176;	// 7th married-serparately threshold (HIGHEST)

        // Married Filing Jointly
        private const int JOINTLY1 = 1;			// 1st married-jointly threshold (LOWEST)
        private const int JOINTLY2 = 19401;		// 2nd married-jointly threshold
        private const int JOINTLY3 = 78951;		// 3rd married-jointly threshold
        private const int JOINTLY4 = 168401;	// 4th married-jointly threshold
        private const int JOINTLY5 = 321451;	// 5th married-jointly threshold
        private const int JOINTLY6 = 408201;	// 6th married-jointly threshold
		private const int JOINTLY7 = 612351;	// 7th married-jointly threshold (HIGHEST)

        // Head of Household
        private const int HOH1 = 1;				// 1st head of household threshold (LOWEST)
        private const int HOH2 = 13851;			// 2nd head of household threshold
        private const int HOH3 = 52851;			// 3rd head of household threshold
        private const int HOH4 = 84201;			// 4th head of household threshold
        private const int HOH5 = 160701;		// 5th head of household threshold
        private const int HOH6 = 204101;		// 6th head of household threshold
		private const int HOH7 = 510301;		// 7th head of household threshold (HIGHEST)

        // Income threshold values that apply to this filer
        private int threshold1;					// 1st income threshold
        private int threshold2;					// 2nd income threshold
        private int threshold3;					// 3rd income threshold
        private int threshold4;					// 4th income threshold
        private int threshold5;					// 5th income threshold
        private int threshold6;					// 6th income threshold
		private int threshold7;					// 7th income threshold

        public Prog3Form()
        {
            InitializeComponent();
        }

        // User has clicked the Calculate Tax button
        // Will calculate and display their marginal tax rate and tax due
        private void calcTaxBtn_Click(object sender, EventArgs e)
        {
			
            // Tax Year 2019 Data
            // The marginal tax rates
            const decimal RATE1 = .10m;			// 1st tax rate (LOWEST)
            const decimal RATE2 = .12m;			// 2nd tax rate
            const decimal RATE3 = .22m;			// 3rd tax rate
            const decimal RATE4 = .24m;			// 4th tax rate
            const decimal RATE5 = .32m;			// 5th tax rate
            const decimal RATE6 = .35m;			// 6th tax rate
            const decimal RATE7 = .37m;			// 7th tax rate (HIGHEST)

			decimal[] rates  = { RATE1, RATE2, RATE3, RATE4, RATE5, RATE6, RATE7 };										// Array for rate values
			int[] thresholds = { threshold1, threshold2, threshold3, threshold4, threshold5, threshold6, threshold7 };	// Array for threshold values

			bool found = false;					// Is the array value found?
			int index = thresholds.Length - 1;	// Index starting at highest array value

			int income;							// Filer's taxable income (input)
            decimal marginalRate;				// Filer's calculated marginal tax rate
            decimal tax;						// Filer's calculated income tax due
            decimal currentTax;                 // Filer's tax for current tier
			int i;								// Used as marker for index

            if (int.TryParse(incomeTxt.Text, out income) && income >= 0)
            {
                // Calculate income tax due and find their marginal rate
                // Uses running total approach
                // Math.Min returns the smaller of two values

                marginalRate = RATE1;								// Assume lowest rate
                tax = Math.Min(income - 0, threshold1 - 0) * RATE1; // Always some from Tier 1


               while (index >= 0 && !found)							// Loop until array value is found
				{
					if (income > thresholds[index])
						found = true;								// Change bool value to true
					else
						--index;									// Check next array value
				}
				if (found)
					marginalRate = rates[index];					// Store rate value as decimal

				for (i = 0; i <= index; i++)
				{
					currentTax = Math.Min(income - thresholds[i], thresholds[i + 1] - thresholds[i]) * rates[i];	// Calculation for tax due
					tax += currentTax;																				// Add currentTax to tax
				}

                // Output results
                marginalRateOutLbl.Text = $"{marginalRate:P0}";
                taxOutLbl.Text = $"{tax:C}";
            }
            else // Invalid input
                MessageBox.Show("Enter valid income!");
        }

        // Form is loading
        // Sets default filing status as Single
        private void Prog2Form_Load(object sender, EventArgs e)
        {
            singleRdoBtn.Checked = true; // Choose single by default
                                         // Will raise CheckedChanged event
        }

        // User has checked/unchecked Single radio button
        // Updates income thresholds
        private void singleRdoBtn_CheckedChanged(object sender, EventArgs e)
        {
            if (singleRdoBtn.Checked) // Single?
            {
                threshold1 = SINGLE1;
                threshold2 = SINGLE2;
                threshold3 = SINGLE3;
                threshold4 = SINGLE4;
                threshold5 = SINGLE5;
                threshold6 = SINGLE6;
				threshold7 = SINGLE7;
            }
        }

        // User has checked/unchecked Married Filing Separately radio button
        // Updates income thresholds
        private void separatelyRdoBtn_CheckedChanged(object sender, EventArgs e)
        {
            if (separatelyRdoBtn.Checked) // Married Filing Separately?
            {
                threshold1 = SEPARATELY1;
                threshold2 = SEPARATELY2;
                threshold3 = SEPARATELY3;
                threshold4 = SEPARATELY4;
                threshold5 = SEPARATELY5;
                threshold6 = SEPARATELY6;
				threshold7 = SEPARATELY7;
            }
        }

        // User has checked/unchecked Married Filing Jointly radio button
        // Updates income thresholds
        private void jointlyRdoBtn_CheckedChanged(object sender, EventArgs e)
        {
            if (jointlyRdoBtn.Checked) // Married Filing Jointly?
            {
                threshold1 = JOINTLY1;
                threshold2 = JOINTLY2;
                threshold3 = JOINTLY3;
                threshold4 = JOINTLY4;
                threshold5 = JOINTLY5;
                threshold6 = JOINTLY6;
				threshold7 = JOINTLY7;
            }
        }

        // User has checked/unchecked Head of Household radio button
        // Updates income thresholds
        private void headOfHouseRdoBtn_CheckedChanged(object sender, EventArgs e)
        {
            if (headOfHouseRdoBtn.Checked) // Head of Household?
            {
                threshold1 = HOH1;
                threshold2 = HOH2;
                threshold3 = HOH3;
                threshold4 = HOH4;
                threshold5 = HOH5;
                threshold6 = HOH6;
				threshold7 = HOH7;
            }
        }
    }
}
